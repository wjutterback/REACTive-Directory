{"version":3,"sources":["components/nav.js","data/API.js","components/table.js","App.js","reportWebVitals.js","index.js"],"names":["navHeader","className","style","textAlign","API","fetch","ReactTable","useState","items","setItems","search","setSearch","searchBool","setSearchBool","sortedField","setSortedField","TableEmployee","data","scope","index","src","picture","thumbnail","alt","name","first","last","location","city","useEffect","a","results","json","resultsData","toBeSorted","handleSearch","sort","b","searchEmployees","map","employee","Object","assign","cell","listEmployees","type","id","placeholder","aria-label","onChange","value","target","toLowerCase","filtered","filter","indexOf","console","log","background","border","fontWeight","onClick","length","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yOAYeA,MAVf,WACE,OACE,qBAAKC,UAAU,YAAf,SACE,qBAAKA,UAAU,aAAf,SACE,oBAAIC,MAAO,CAAEC,UAAW,UAAxB,qC,8BCJKC,EACH,kBAAMC,MAHA,yCCwJDC,MApJf,WACE,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA4BF,mBAAS,IAArC,mBAAOG,EAAP,KAAeC,EAAf,KACA,EAAoCJ,oBAAS,GAA7C,mBAAOK,EAAP,KAAmBC,EAAnB,KACA,EAAsCN,qBAAtC,mBAAOO,EAAP,KAAoBC,EAApB,KAyBA,SAASC,EAAT,GAAkC,IAATC,EAAQ,EAARA,KACvB,OACE,+BACE,oBAAIC,MAAM,MAAV,SAAiBD,EAAKE,QACtB,6BACE,qBAAKC,IAAKH,EAAKI,QAAQC,UAAWC,IAAI,yBAExC,6BAAKN,EAAKO,KAAKC,QACf,6BAAKR,EAAKO,KAAKE,OACf,6BAAKT,EAAKU,SAASC,UAhCzBC,qBAAU,YACU,uCAAG,gCAAAC,EAAA,sEACG1B,IADH,cACb2B,EADa,gBAEOA,EAAQC,OAFf,OAEbC,EAFa,OAGbC,EAAaD,EAAYF,QAC/BtB,EAASyB,GAJU,2CAAH,qDAMlBC,KACC,IAEHN,qBAAU,WACY,UAAhBf,IACFN,EAAM4B,MAAK,SAACN,EAAGO,GACb,OAAOP,EAAEN,KAAKC,MAAQY,EAAEb,KAAKC,OACxB,EACDK,EAAEN,KAAKC,MAAQY,EAAEb,KAAKC,MACtB,EACA,KAENhB,EAASD,MAEV,CAACA,EAAOM,IAyCX,IAAIK,EAAQ,EACRmB,EAAkB5B,EAAO6B,KAAI,SAACC,GAGhC,OAFArB,GAAS,EACTsB,OAAOC,OAAOF,EAAU,CAAErB,MAAOA,IAC1B,cAACH,EAAD,CAAmCC,KAAMuB,GAArBA,EAASG,SAGtCxB,EAAQ,EACR,IAAIyB,EAAgBpC,EAAM+B,KAAI,SAACC,GAG7B,OAFArB,GAAS,EACTsB,OAAOC,OAAOF,EAAU,CAAErB,MAAOA,IAC1B,cAACH,EAAD,CAAmCC,KAAMuB,GAArBA,EAASG,SAGtC,OACE,qCACE,qBAAK1C,UAAU,eAAf,SACE,uBACE4C,KAAK,SACLC,GAAG,QACH7C,UAAU,eACV8C,YAAY,mBACZC,aAAW,SACXC,SAhDR,YAAwC,IAClCC,EADiC,EAAVC,OACRD,MAAME,cACrBC,EAAW7C,EAAM8C,QAAO,SAACd,GAC3B,OACwD,IAAtDA,EAAShB,KAAKC,MAAM2B,cAAcG,QAAQL,KACW,IAArDV,EAAShB,KAAKE,KAAK0B,cAAcG,QAAQL,KACgB,IAAzDV,EAASb,SAASC,KAAKwB,cAAcG,QAAQL,MAG7B,UAAhBpC,IACF0C,QAAQC,IAAIJ,GACZA,EAASjB,MAAK,SAACN,EAAGO,GAChB,OAAOP,EAAEN,KAAKC,MAAQY,EAAEb,KAAKC,OACxB,EACDK,EAAEN,KAAKC,MAAQY,EAAEb,KAAKC,MACtB,EACA,MAGRd,EAAU0C,GAERxC,EADY,OAAVqC,QA+BF,wBAAOjD,UAAU,QAAjB,UACE,gCACE,+BACE,oBAAIiB,MAAM,MAAV,eACA,oBAAIA,MAAM,MAAV,qBACA,oBAAIA,MAAM,MAAV,SACE,wBACEhB,MAAO,CACLwD,WAAY,OACZC,OAAQ,OACRC,WAAY,QAEdf,KAAK,SACLgB,QAAS,kBAAM9C,EAAe,UAPhC,qBAYF,oBAAIG,MAAM,MAAV,SACE,wBACEhB,MAAO,CACLwD,WAAY,OACZC,OAAQ,OACRC,WAAY,QAEdf,KAAK,SACLgB,QAAS,kBAAM9C,EAAe,SAPhC,oBAYF,oBAAIG,MAAM,MAAV,SACE,wBACEhB,MAAO,CACLwD,WAAY,OACZC,OAAQ,OACRC,WAAY,QAEdf,KAAK,SACLgB,QAAS,kBAAM9C,EAAe,SAPhC,yBAcN,kCACqB,IAAlBL,EAAOoD,QAAgBxB,EACL,IAAlB5B,EAAOoD,SAA+B,IAAflD,GAAwBgC,YCrI3CmB,MATf,WACE,OACE,gCACE,cAAC,EAAD,IACA,cAAC,EAAD,QCISC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,MCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.f1c488ad.chunk.js","sourcesContent":["import React from 'react';\n\nfunction navHeader() {\n  return (\n    <div className='container'>\n      <div className='jumbotron '>\n        <h1 style={{ textAlign: 'center' }}>Employee Directory</h1>\n      </div>\n    </div>\n  );\n}\n\nexport default navHeader;\n","const BASEURL = 'https://randomuser.me/api?results=50';\n\nexport const API = {\n  search: () => fetch(BASEURL),\n};\n","import React from 'react';\nimport { useState, useEffect } from 'react';\nimport { API } from '../data/API';\n\nfunction ReactTable() {\n  const [items, setItems] = useState([]);\n  const [search, setSearch] = useState([]);\n  const [searchBool, setSearchBool] = useState(false);\n  const [sortedField, setSortedField] = useState();\n\n  useEffect(() => {\n    const handleSearch = async () => {\n      const results = await API.search();\n      const resultsData = await results.json();\n      const toBeSorted = resultsData.results;\n      setItems(toBeSorted);\n    };\n    handleSearch();\n  }, []);\n\n  useEffect(() => {\n    if (sortedField === 'First') {\n      items.sort((a, b) => {\n        return a.name.first < b.name.first\n          ? -1\n          : a.name.first > b.name.first\n          ? 1\n          : 0;\n      });\n      setItems(items);\n    }\n  }, [items, sortedField]);\n\n  function TableEmployee({ data }) {\n    return (\n      <tr>\n        <th scope='row'>{data.index}</th>\n        <td>\n          <img src={data.picture.thumbnail} alt='employee thumbnail'></img>\n        </td>\n        <td>{data.name.first}</td>\n        <td>{data.name.last}</td>\n        <td>{data.location.city}</td>\n      </tr>\n    );\n  }\n\n  function handleInputChange({ target }) {\n    let value = target.value.toLowerCase();\n    let filtered = items.filter((employee) => {\n      return (\n        employee.name.first.toLowerCase().indexOf(value) !== -1 ||\n        employee.name.last.toLowerCase().indexOf(value) !== -1 ||\n        employee.location.city.toLowerCase().indexOf(value) !== -1\n      );\n    });\n    if (sortedField === 'First') {\n      console.log(filtered);\n      filtered.sort((a, b) => {\n        return a.name.first < b.name.first\n          ? -1\n          : a.name.first > b.name.first\n          ? 1\n          : 0;\n      });\n    }\n    setSearch(filtered);\n    if (value !== null) {\n      setSearchBool(true);\n    } else setSearchBool(false);\n  }\n\n  let index = 0;\n  let searchEmployees = search.map((employee) => {\n    index += 1;\n    Object.assign(employee, { index: index });\n    return <TableEmployee key={employee.cell} data={employee} />;\n  });\n\n  index = 0;\n  let listEmployees = items.map((employee) => {\n    index += 1;\n    Object.assign(employee, { index: index });\n    return <TableEmployee key={employee.cell} data={employee} />;\n  });\n\n  return (\n    <>\n      <div className='form-outline'>\n        <input\n          type='search'\n          id='form1'\n          className='form-control'\n          placeholder='Search Employees'\n          aria-label='Search'\n          onChange={handleInputChange}\n        />\n      </div>\n      <table className='table'>\n        <thead>\n          <tr>\n            <th scope='col'>#</th>\n            <th scope='col'>Picture</th>\n            <th scope='col'>\n              <button\n                style={{\n                  background: 'none',\n                  border: 'none',\n                  fontWeight: 'bold',\n                }}\n                type='button'\n                onClick={() => setSortedField('First')}\n              >\n                First\n              </button>\n            </th>\n            <th scope='col'>\n              <button\n                style={{\n                  background: 'none',\n                  border: 'none',\n                  fontWeight: 'bold',\n                }}\n                type='button'\n                onClick={() => setSortedField('Last')}\n              >\n                Last\n              </button>\n            </th>\n            <th scope='col'>\n              <button\n                style={{\n                  background: 'none',\n                  border: 'none',\n                  fontWeight: 'bold',\n                }}\n                type='button'\n                onClick={() => setSortedField('City')}\n              >\n                City\n              </button>\n            </th>\n          </tr>\n        </thead>\n        <tbody>\n          {search.length !== 0 && searchEmployees}\n          {search.length === 0 && searchBool === false && listEmployees}\n        </tbody>\n      </table>\n    </>\n  );\n}\nexport default ReactTable;\n","import './App.css';\nimport NavHeader from './components/nav';\nimport Table from './components/table';\n\nfunction App() {\n  return (\n    <div>\n      <NavHeader />\n      <Table />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}